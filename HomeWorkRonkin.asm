format PE CONSOLE
include 'C:\FASM\INCLUDE\win32ax.inc'

entry start

section '.data?' data readable writeable

   x2 dd 4 dup(0)  ;Объявление неинициализированного массива x2 из 4 элемнетов, каждый размером 4 байта
   size_x2 = $-x2  ;Размер массива x2
   A dd ?   ;Объявление неинициализированной переменной A размером 4 байта
   B dd ?   ;Объявление неинициализированной переменной B размером 4 байта
   C dd ?   ;Объявление неинициализированной переменной C размером 4 байта
   D dd ?   ;Объявление неинициализированной переменной D размером 4 байта

section '.data' data readable
   
   amount dd 3  ;Объявление инциализированной перменной размером 4 байта для хранения количества повторов цикла
   


section '.msg' data readable
   msg_d db ' %d ', 0Dh, 0Ah,0 ;Функция для вывода числового значения
   msg_s db 0Dh, 0Ah,' %s ',  0Dh, 0Ah,0 ;Функция для вывода строки                                                                     

                                                                    
section '.code' code readable executable

   macro print_array arr, arr_size, word_size ;Объявление макроса для вывода массива на экран с 3 входными параметрами
{
     mov ebx,0 ;Помещаем в регистр ebx 0
     @@: ;Создание анонимной метки
       cinvoke printf,  ' %d ', [arr+ebx],0 ;Вывод на экран значения элемента массива arr
       add ebx,word_size   ;Сложение значения регистра ebx и значения в переменной word_size
       cmp ebx , arr_size ;Сравнение значения регистра ebx и размера массива 
       jne @b ;Если значения не равны, переход к предыдущей метке 
}
start:

    cinvoke printf,  msg_s,'Enter the 1 number',0  ;Вывод строки на экран
    cinvoke scanf,   ' %d', A   ;Ввод значения переменной A
    mov eax,  [A]   ;Помещаем значение переменной A в регистр eax
    mov [x2], eax    ;Помещаем значение регистра eax в 1-ый элемент массива
    xor eax, eax       ;Обнуляем регистр eax
    cinvoke printf,  msg_s,'Enter the 2 number',0  ;Вывод строки на экран
    cinvoke scanf,   ' %d', B   ;Ввод значения переменной B
    mov eax,  [B]   ;Помещаем значение переменной B в регистр eax
    mov [x2+4], eax  ;Помещаем значение регистра eax во 2-ой элемент массива
    xor eax, eax      ;Обнуляем регистр eax
    cinvoke printf,  msg_s,'Enter the 3 number',0  ;Вывод строки на экран
    cinvoke scanf,   ' %d', C   ;Ввод значения переменной C
    mov eax,  [C]    ;Помещаем значение переменной C в регистр eax
    mov [x2+8], eax   ;Помещаем значение регистра eax в 3-ий элемент массива
    xor eax, eax       ;Обнуляем регистр eax
    cinvoke printf,  msg_s,'Enter the 4 number',0  ;Вывод строки на экран
    cinvoke scanf,   ' %d', D   ;Ввод значения переменной D
    mov eax,  [D]    ;Помещаем значение переменной D в регистр eax
    mov [x2+12], eax  ;Помещаем значение регистра eax в 4-ый элемент массива
    xor eax, eax       ;Обнуляем регистр eax


mov edx,[amount] ;Помещаем в edx количество операций цикла, чтобы пройтись по всем элементам массива кроме последнего
xor ebx,ebx   ;Обнуляем регистр ebx

    cykl1:   ;Метка для внешнего цикла, который считает число обходов, их должно быть на 1 меньше от общего количества элементом, в моё случае 4-1 = 3
    mov ecx, [amount] ;Помещаем в ecx количество операций цикла, чтобы пройтись по всем элементам массива кроме последнего
    lea ebx,[x2]  ;Помещаем адрес массива x2 в регист ebx

    cykl2:  ;Метка для внутренного цикла, который сравнивает элементы попарно до предпоследнего элемента включительно
    mov eax,[ebx]  ;Помещаем в регистр  eax элемент массива x2
    cmp eax, [ebx+4] ;Сравниваем n-1 элемент массива из регистра eax с n элементом  
    jl m1 ;Если n-1 элемент меньше n элемента, переходим на метку m1
    ;Иначе меняем элементы массива местами
    xchg eax, [ebx+4] ;Помещаем n-ый элемент массива в регистр eax и значение регистра eax (в нём хранится элемнт n-1) по адресу n-ого элемента
    mov [ebx], eax ;Помещаем значение регистра eax (сейчас в нём хранится старый n-ый элемент, тот который меньше) по адресу n-ого элемента  

    m1:  ;Метка для счётчиков внутреннего и внешнего цикла
    add ebx, 4 ;Переход к следующему элементу массива
    loop cykl2 ;Уменьшаем на 1 значение регистра ecx (счётчик внутреннего цикла), если больше 0, переходим на метке cykl1
    dec edx ;Уменьшаем на 1 значение регистра edx (счётчик внешнего цикла)
    jnz cykl1 ;Если флаг ZF (результат равен нулю) сброшен, происходит переход на метку cykl1

 
xor ebx,ebx  ;Обнуляем регистр ebx

cinvoke printf,  msg_s,'Massive: ',0 ;Вывод строки на экран
print_array x2, size_x2, 4  ;Вызов макросса print_array с передачей ему 3 параметров

     invoke  sleep, 5000     ; 5 sec. delay
     invoke  exit, 0
     
     ret




section '.idata' import data readable
 
 library msvcrt,'MSVCRT.DLL',\
    kernel32,'KERNEL32.DLL'
 
 import kernel32,\
    sleep,'Sleep'
 
 import msvcrt,\
    puts,'puts',\
    scanf,'scanf',\
    printf,'printf',\
    lstrlen,'lstrlenA',\
    exit,'exit'
